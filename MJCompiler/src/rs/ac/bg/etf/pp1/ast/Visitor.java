// generated with ast extension for cup
// version 0.8
// 6/1/2018 16:33:35


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(NonTypedConstAssignment NonTypedConstAssignment);
    public void visit(CodeGenFixupAfterWhile CodeGenFixupAfterWhile);
    public void visit(Mulop Mulop);
    public void visit(Relop Relop);
    public void visit(CodeGenFixupConditionComplex CodeGenFixupConditionComplex);
    public void visit(MethodStatementList MethodStatementList);
    public void visit(CodeGenFixupStatementIfMatched CodeGenFixupStatementIfMatched);
    public void visit(ClassExtendOption ClassExtendOption);
    public void visit(ProgramMethodDeclList ProgramMethodDeclList);
    public void visit(GlobalsList GlobalsList);
    public void visit(StatementList StatementList);
    public void visit(Addop Addop);
    public void visit(NonTypedDeclaration NonTypedDeclaration);
    public void visit(Factor Factor);
    public void visit(CondTerm CondTerm);
    public void visit(CodeGenGetPc CodeGenGetPc);
    public void visit(ClassLocalVars ClassLocalVars);
    public void visit(NumConst NumConst);
    public void visit(Designator Designator);
    public void visit(CodeGenFixupAfterDo CodeGenFixupAfterDo);
    public void visit(Term Term);
    public void visit(Condition Condition);
    public void visit(MethodFormPars MethodFormPars);
    public void visit(ClassMethodList ClassMethodList);
    public void visit(ConstDeclList ConstDeclList);
    public void visit(StatementReturnValue StatementReturnValue);
    public void visit(GlobalsElem GlobalsElem);
    public void visit(VarDeclList VarDeclList);
    public void visit(Expr Expr);
    public void visit(ActPars ActPars);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(ExprTerm ExprTerm);
    public void visit(CallActualParams CallActualParams);
    public void visit(MethodReturnType MethodReturnType);
    public void visit(CodeGenInsertFunction CodeGenInsertFunction);
    public void visit(CodeGenFixupStatementIfUnmatched CodeGenFixupStatementIfUnmatched);
    public void visit(Statement Statement);
    public void visit(MethodLocalVars MethodLocalVars);
    public void visit(VarDecl VarDecl);
    public void visit(CodeGenJmpFixup CodeGenJmpFixup);
    public void visit(CondFact CondFact);
    public void visit(SemAnMethodDeclOpenScope SemAnMethodDeclOpenScope);
    public void visit(FormPars FormPars);
    public void visit(SemAnEraseParamList SemAnEraseParamList);
    public void visit(TypedDeclaration TypedDeclaration);
    public void visit(RelopLesserOrEqual RelopLesserOrEqual);
    public void visit(RelopGreaterOrEqual RelopGreaterOrEqual);
    public void visit(RelopLesser RelopLesser);
    public void visit(RelopGreater RelopGreater);
    public void visit(RelopNotEqual RelopNotEqual);
    public void visit(RelopEquivalent RelopEquivalent);
    public void visit(CondFactComplex CondFactComplex);
    public void visit(CondFactSingle CondFactSingle);
    public void visit(CondTermComplex CondTermComplex);
    public void visit(CondTermSimple CondTermSimple);
    public void visit(CodeGenJmpFixupEmpty CodeGenJmpFixupEmpty);
    public void visit(CodeGenFixupAfterDoEmpty CodeGenFixupAfterDoEmpty);
    public void visit(CodeGenFixupAfterWhileEmpty CodeGenFixupAfterWhileEmpty);
    public void visit(CodeGenFixupConditionComplexEmpty CodeGenFixupConditionComplexEmpty);
    public void visit(CodeGenFixupStatementIfUnmatchedEmpty CodeGenFixupStatementIfUnmatchedEmpty);
    public void visit(CodeGenFixupStatementIfMatchedEmpty CodeGenFixupStatementIfMatchedEmpty);
    public void visit(ConditionError ConditionError);
    public void visit(ConditionComplex ConditionComplex);
    public void visit(ConditionSimple ConditionSimple);
    public void visit(SemAnEraseParamListEmpty SemAnEraseParamListEmpty);
    public void visit(FactorFuncCall FactorFuncCall);
    public void visit(FactorDesignator FactorDesignator);
    public void visit(ActParsMultiple ActParsMultiple);
    public void visit(ActParsSingle ActParsSingle);
    public void visit(CallActualParamsSome CallActualParamsSome);
    public void visit(CallActualParamsNone CallActualParamsNone);
    public void visit(StatementListNotEmpty StatementListNotEmpty);
    public void visit(StatementListEmpty StatementListEmpty);
    public void visit(StatementReturnValueNotEmpty StatementReturnValueNotEmpty);
    public void visit(StatementReturnValueEmpty StatementReturnValueEmpty);
    public void visit(StatementBlockOfStatements StatementBlockOfStatements);
    public void visit(StatementReturn StatementReturn);
    public void visit(StatementContinue StatementContinue);
    public void visit(StatementBreak StatementBreak);
    public void visit(StatementDoWhile StatementDoWhile);
    public void visit(StatementIfUnmatched StatementIfUnmatched);
    public void visit(StatementIfMatched StatementIfMatched);
    public void visit(DesignatorStatementCall DesignatorStatementCall);
    public void visit(MulopMod MulopMod);
    public void visit(MulopDiv MulopDiv);
    public void visit(MulopMul MulopMul);
    public void visit(AddopSub AddopSub);
    public void visit(AddopAdd AddopAdd);
    public void visit(DesignatorArrayDereferencing DesignatorArrayDereferencing);
    public void visit(DesignatorFieldReferencing DesignatorFieldReferencing);
    public void visit(DesignatorIdentifier DesignatorIdentifier);
    public void visit(FactorArrayAllocation FactorArrayAllocation);
    public void visit(FactorConstructor FactorConstructor);
    public void visit(FactorExpr FactorExpr);
    public void visit(FactorBoolConstant FactorBoolConstant);
    public void visit(FactorCharConstant FactorCharConstant);
    public void visit(FactorNumConstant FactorNumConstant);
    public void visit(TermProduct TermProduct);
    public void visit(TermFactor TermFactor);
    public void visit(ExprTermNegative ExprTermNegative);
    public void visit(ExprTermPositive ExprTermPositive);
    public void visit(ExprTermSum ExprTermSum);
    public void visit(ExprTermSingle ExprTermSingle);
    public void visit(DesignatorStatementDecrement DesignatorStatementDecrement);
    public void visit(DesignatorStatementIncrement DesignatorStatementIncrement);
    public void visit(DesignatorStatementAssignmentError2 DesignatorStatementAssignmentError2);
    public void visit(DesignatorStatementAssignmentError1 DesignatorStatementAssignmentError1);
    public void visit(DesignatorStatementAssignment DesignatorStatementAssignment);
    public void visit(StatementPrintComplex StatementPrintComplex);
    public void visit(StatementPrintSimple StatementPrintSimple);
    public void visit(StatementRead StatementRead);
    public void visit(StatementAssignment StatementAssignment);
    public void visit(Type Type);
    public void visit(NonTypedDeclarationError NonTypedDeclarationError);
    public void visit(NonTypedDeclarationVector NonTypedDeclarationVector);
    public void visit(NonTypedDeclarationScalar NonTypedDeclarationScalar);
    public void visit(TypedDeclarationError TypedDeclarationError);
    public void visit(TypedDeclarationVector TypedDeclarationVector);
    public void visit(TypedDeclarationScalar TypedDeclarationScalar);
    public void visit(FormParsSingle FormParsSingle);
    public void visit(FormParsList FormParsList);
    public void visit(MethodStatementListNonEmpty MethodStatementListNonEmpty);
    public void visit(MethodStatementListEmpty MethodStatementListEmpty);
    public void visit(MethodLocalVarsExistent MethodLocalVarsExistent);
    public void visit(MethodLocalVarsNonExistent MethodLocalVarsNonExistent);
    public void visit(CodeGenGetPcEmpty CodeGenGetPcEmpty);
    public void visit(SemAnMethodDeclOpenScopeEmpty SemAnMethodDeclOpenScopeEmpty);
    public void visit(MethodFormParsSome MethodFormParsSome);
    public void visit(MethodFormParsNone MethodFormParsNone);
    public void visit(MethodReturnTypeVoid MethodReturnTypeVoid);
    public void visit(MethodReturnTypeTyped MethodReturnTypeTyped);
    public void visit(MethodDecl MethodDecl);
    public void visit(ProgramMethodDeclListNonEmpty ProgramMethodDeclListNonEmpty);
    public void visit(ProgramMethodDeclListEmpty ProgramMethodDeclListEmpty);
    public void visit(ClassMethodListNonEmpty ClassMethodListNonEmpty);
    public void visit(ClassMethodListEmpty ClassMethodListEmpty);
    public void visit(ClassMethodSection ClassMethodSection);
    public void visit(ClassLocalVarsExistent ClassLocalVarsExistent);
    public void visit(ClassLocalVarsNonExistent ClassLocalVarsNonExistent);
    public void visit(ClassExtendOptionDerived ClassExtendOptionDerived);
    public void visit(ClassExtendOptionNonDerived ClassExtendOptionNonDerived);
    public void visit(ClassDecl ClassDecl);
    public void visit(VarDeclListMultiple VarDeclListMultiple);
    public void visit(VarDeclListSingle VarDeclListSingle);
    public void visit(VarDeclOk VarDeclOk);
    public void visit(BoolConst BoolConst);
    public void visit(CharConst CharConst);
    public void visit(NumConstPositive NumConstPositive);
    public void visit(NonTypedConstAssignmentBool NonTypedConstAssignmentBool);
    public void visit(NonTypedConstAssignmentChar NonTypedConstAssignmentChar);
    public void visit(NonTypedConstAssignmentNum NonTypedConstAssignmentNum);
    public void visit(TypedConstAssignment TypedConstAssignment);
    public void visit(ConstDeclListMultiple ConstDeclListMultiple);
    public void visit(ConstDeclListSingle ConstDeclListSingle);
    public void visit(ConstDecl ConstDecl);
    public void visit(GlobalsElemConst GlobalsElemConst);
    public void visit(GlobalsElemClass GlobalsElemClass);
    public void visit(GlobalsElemVar GlobalsElemVar);
    public void visit(GlobalsListEmpty GlobalsListEmpty);
    public void visit(GlobalsListList GlobalsListList);
    public void visit(SemAnProgramName SemAnProgramName);
    public void visit(CodeGenInsertFunctionEmpty CodeGenInsertFunctionEmpty);
    public void visit(Program Program);

}
